<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <name>Pyramus</name>
  <artifactId>pyramus</artifactId>
  <packaging>war</packaging>

  <parent>
    <groupId>fi.otavanopisto.pyramus</groupId>
    <artifactId>parent</artifactId>
    <version>0.7.228-SNAPSHOT</version>
    <relativePath>../</relativePath>
  </parent>
  <properties>
    <mariadb-java-client.version>3.5.0</mariadb-java-client.version>
  </properties>
  <dependencies>

    <!-- Servlet -->

    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_4.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Jakarta -->

    <dependency>
      <groupId>jakarta.persistence</groupId>
      <artifactId>jakarta.persistence-api</artifactId>
      <scope>provided</scope>
    </dependency>
  
    <dependency>
      <groupId>jakarta.validation</groupId>
      <artifactId>jakarta.validation-api</artifactId>
      <scope>provided</scope>
    </dependency>
  
    <!-- RESTEasy -->

    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- CDI -->

    <dependency>
      <groupId>jakarta.enterprise</groupId>
      <artifactId>jakarta.enterprise.cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.interceptor</groupId>
      <artifactId>jboss-interceptors-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Hibernate -->

    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-queryparser</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>org.dom4j</groupId>
          <artifactId>dom4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Transactions -->

    <dependency>
      <groupId>org.jboss.spec.javax.transaction</groupId>
      <artifactId>jboss-transaction-api_1.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- JSP -->

    <dependency>
      <groupId>org.jboss.spec.javax.servlet.jsp</groupId>
      <artifactId>jboss-jsp-api_2.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- JSTL -->

    <dependency>
      <groupId>jakarta.servlet.jsp.jstl</groupId>
      <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
      <version>1.2.7</version>
    </dependency>

    <!-- JMS -->

    <dependency>
      <groupId>org.jboss.spec.javax.jms</groupId>
      <artifactId>jboss-jms-api_2.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- EJB -->

    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Commons -->

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- OpenCSV -->

    <dependency>
      <groupId>net.sf.opencsv</groupId>
      <artifactId>opencsv</artifactId>
    </dependency>

    <!-- JSON -->

    <dependency>
      <groupId>net.sf.json-lib</groupId>
      <artifactId>json-lib</artifactId>
      <classifier>jdk15</classifier>
    </dependency>

    <!-- SLF4J -->

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Maven Aether -->

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-aether-provider</artifactId>
    </dependency>

    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-connector-wagon</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>sisu-inject-plexus</artifactId>
          <groupId>org.sonatype.sisu</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-http-lightweight</artifactId>
    </dependency>

    <!-- JavaFaker -->

    <dependency>
      <groupId>com.github.javafaker</groupId>
      <artifactId>javafaker</artifactId>
    </dependency>

    <!-- Freemarker -->

    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
    </dependency>

    <!-- Xalan -->

    <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <version>2.7.3</version>
      <exclusions>
        <exclusion>
          <artifactId>xml-apis</artifactId>
          <groupId>xml-apis</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>xalan</groupId>
      <artifactId>serializer</artifactId>
      <version>2.7.3</version>
    </dependency>
    
     <!-- Oltu -->

     <dependency>
         <groupId>org.apache.oltu.oauth2</groupId>
         <artifactId>org.apache.oltu.oauth2.common</artifactId>
     </dependency>
     <dependency>
         <groupId>org.apache.oltu.oauth2</groupId>
         <artifactId>org.apache.oltu.oauth2.authzserver</artifactId>
     </dependency>
     <dependency>
         <groupId>org.apache.oltu.oauth2</groupId>
         <artifactId>org.apache.oltu.oauth2.resourceserver</artifactId>
     </dependency>

    <!-- Jackson - used in tests -->

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Pyramus -->

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>common</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>framework</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>persistence</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>plugin-core</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>rest</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>rest-model</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>smvcj</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>pyramus-webhooks</artifactId>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto</groupId>
      <artifactId>webapp-permission</artifactId>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>googleoauth-plugin</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>muikku-plugin</artifactId>
      <scope>compile</scope>
    </dependency>

    <!-- Test Dependecies JUnit4 -->

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>json-schema-validator</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Test Dependecies JUnit5 -->
    
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.oltu.oauth2</groupId>
      <artifactId>org.apache.oltu.oauth2.client</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>33.1.0-jre</version>
      <scope>test</scope>
    </dependency>
    
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.3.2</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>koski-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>

      <properties>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      </properties>
      
      <build>
        <plugins>    
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M3</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.0.0-M3</version>
            <configuration>
              <includes>
                <include>fi/otavanopisto/pyramus/koski/**/*IT.java</include>
              </includes>
            </configuration>
            <executions>
              <execution>
                <id>koski-integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>koski-verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.pyramus.fi</it.host>
        <it.database.name>testpyramusdb</it.database.name>
        <it.jdbc.driver>org.mariadb.jdbc.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:mariadb://127.0.0.1:5555/testpyramusdb</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/pyramus</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>MYSQL5_INNODB</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${project.build.directory}${file.separator}pyrit.keystore</it.keystore.file>
        <it.wildfly.cli-batch>true</it.wildfly.cli-batch>
        <it.skipserverstop>false</it.skipserverstop>
        <it.cargo.stop.timeout>240000</it.cargo.stop.timeout>
      </properties>

      <dependencies>
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
        <dependency>
          <groupId>org.mariadb.jdbc</groupId>
          <artifactId>mariadb-java-client</artifactId>
          <version>${mariadb-java-client.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.codehaus.plexus/plexus-utils -->
        <dependency>
          <groupId>org.codehaus.plexus</groupId>
          <artifactId>plexus-utils</artifactId>
          <version>3.4.2</version>
        </dependency>
      </dependencies>
      <build>

        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.39.1</version>
            <configuration>
              <machine>
                <autoCreate>true</autoCreate>
                <createOptions>
                  <virtualbox-memory>10000</virtualbox-memory>
                  <virtualbox-no-share />
                </createOptions>
              </machine>
              <dockerHost>unix:///var/run/docker.sock</dockerHost>
              <verbose>true</verbose>
              <images>
                <image>
                  <alias>mariadb</alias>
                  <name>mariadb</name>
                  <run>
                    <env>
                      <MYSQL_USER>sa</MYSQL_USER>
                      <MYSQL_PASSWORD>sa</MYSQL_PASSWORD>
                      <MYSQL_ROOT_PASSWORD>test</MYSQL_ROOT_PASSWORD>
                      <MYSQL_DATABASE>testpyramusdb</MYSQL_DATABASE>
                    </env>
                    <wait>
                      <log>Ready for start up.</log>
                      <time>25000</time>
                    </wait>
                    <ports>
                      <port>5555:3306</port>
                    </ports>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>docker-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>docker-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
              <execution>
                <id>enforce-files-exist</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireFilesExist>
                      <files>
                       <file>src/test/resources/rest-data.sql</file>
                      </files>
                    </requireFilesExist>
                  </rules>
                  <fail>true</fail>
                </configuration>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <configuration>
              <tasks>
                  <sleep seconds="5" />
              </tasks>
            </configuration>
            <executions>
              <execution>
                <id>Ensure MariaDB startup</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M3</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.0.0-M3</version>
            <configuration>
              <includes>
                <include>fi/otavanopisto/pyramus/rest/**/*IT.java</include>
                <include>fi/otavanopisto/pyramus/koski/**/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.skipserverstop>${it.skipserverstop}</it.skipserverstop>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>failsafe-integration-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>failsafe-verify</id>
                <phase>verify</phase>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>de.jpdigital</groupId>
            <artifactId>hibernate53-ddl-maven-plugin</artifactId>
            <version>2.5.0</version>
            <dependencies>
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
              <dependency>
                <groupId>org.mariadb.jdbc</groupId>
                <artifactId>mariadb-java-client</artifactId>
                <version>${mariadb-java-client.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <dialects>
                <param>${it.hibernate.dialect}</param>
              </dialects>
              <outputDirectory>${basedir}/target/sql/ddl</outputDirectory>
              <persistenceXml>${basedir}/src/test/resources/persistence_for_generation.xml</persistenceXml>
              <createDropStatements>false</createDropStatements>
              <omitDialectFromFileName>true</omitDialectFromFileName>
              <outputFileNamePrefix />
              <outputFileNameSuffix>createDatabase</outputFileNameSuffix>
              <packages>
                <param>fi.otavanopisto.pyramus.domainmodel</param>
              </packages>
            </configuration>
            <executions>
              <execution>
                <id>generate-ddl</id>
                <phase>process-classes</phase>
                <goals>
                  <goal>gen-ddl</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.6</version>
            <dependencies>
              <dependency>
                <groupId>org.codehaus.plexus</groupId>
                <artifactId>plexus-utils</artifactId>
                <version>3.4.2</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>
            <dependencies>
              <!-- specify the dependent jdbc driver here -->
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
              <dependency>
                <groupId>org.mariadb.jdbc</groupId>
                <artifactId>mariadb-java-client</artifactId>
                <version>${mariadb-java-client.version}</version>
              </dependency>
            </dependencies>

            <configuration>
              <driver>${it.jdbc.driver}</driver>
              <url>${it.jdbc.url}</url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <srcFiles>
                    <srcFile>${basedir}/target/sql/ddl/createDatabase.sql</srcFile>
                    <srcFile>src/test/resources/rest-data.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>1.9.11</version>
            <configuration>
              <!-- Container configs -->
              <container>
                <containerId>wildfly26x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>https://github.com/wildfly/wildfly/releases/download/26.1.2.Final/wildfly-26.1.2.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
                  <dependency>
                    <groupId>org.mariadb.jdbc</groupId>
                    <artifactId>mariadb-java-client</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <!-- Configuration to use with the container or the deployer -->
              <configuration>
                <files>
                  <copy>
                    <file>${project.basedir}/src/test/resources/koski-config.json</file>
                    <tofile>/configuration/koski-config.json</tofile>
                    <configfile>false</configfile>
                    <overwrite>true</overwrite>
                  </copy>
                </files>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>--add-opens java.base/java.util=ALL-UNNAMED -Xms64m -Xmx1152m</cargo.jvmargs>
                  <cargo.datasource.datasource.pyramus>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyramus>
                </properties>
              </configuration>
            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <timeout>${it.cargo.stop.timeout}</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>3.0.0.Final</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <commands>
                    <command>/system-property=pyramus.workspace:add(value="${basedir}/..")</command>
                    <command>/system-property=pyramus-url:add(value="${it.host}:${it.port.http}")</command>
                    <command>/subsystem=undertow/server=default-server/host=pyramus:add()</command>
                    <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=alias,value=["${it.host}"])</command>
                    <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=default-web-module,value=pyramus-ROOT.war)</command>
                    <command>/subsystem=undertow:write-attribute(name=default-virtual-host,value="pyramus")</command>
                    <command>/subsystem=undertow/server=default-server/host=default-host:remove()</command>
                    <command>/subsystem=undertow/configuration=handler/file=welcome-content:remove</command>
                    <command>/subsystem=logging/logger=javax.ws.rs.NotFoundException:add(level=SEVERE)</command>
                    <command>:reload</command>
                  </commands>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-webapp</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>ui-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.pyramus.fi</it.host>
        <it.database.name>testpyramusdb</it.database.name>
        <it.jdbc.driver>org.mariadb.jdbc.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:mariadb://127.0.0.1:5555/testpyramusdb</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/pyramus</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>MYSQL5_INNODB</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${project.build.directory}${file.separator}pyrit.keystore</it.keystore.file>
        <it.wildfly.cli-batch>true</it.wildfly.cli-batch>
        <it.skipserverstop>false</it.skipserverstop>
        <it.cargo.stop.timeout>240000</it.cargo.stop.timeout>
        <it.browser>chrome</it.browser>
        <it.headless>true</it.headless>
      </properties>

      <dependencies>
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
        <dependency>
          <groupId>org.mariadb.jdbc</groupId>
          <artifactId>mariadb-java-client</artifactId>
          <version>${mariadb-java-client.version}</version>
        </dependency>
      </dependencies>
      <build>

        <plugins>
        
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.39.1</version>
            <configuration>
              <machine>
                <autoCreate>true</autoCreate>
                <createOptions>
                  <virtualbox-memory>10000</virtualbox-memory>
                  <virtualbox-no-share />
                </createOptions>
              </machine>
              <dockerHost>unix:///var/run/docker.sock</dockerHost>
              <verbose>true</verbose>
              <images>
                <image>
                  <alias>mariadb</alias>
                  <name>mariadb</name>
                  <run>
                    <env>
                      <MYSQL_USER>sa</MYSQL_USER>
                      <MYSQL_PASSWORD>sa</MYSQL_PASSWORD>
                      <MYSQL_ROOT_PASSWORD>test</MYSQL_ROOT_PASSWORD>
                      <MYSQL_DATABASE>testpyramusdb</MYSQL_DATABASE>
                    </env>
                    <wait>
                      <log>Ready for start up.</log>
                      <time>25000</time>
                    </wait>
                    <ports>
                      <port>5555:3306</port>
                    </ports>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>docker-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>docker-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
              <execution>
                <id>enforce-files-exist</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireFilesExist>
                      <files>
                       <file>src/test/resources/ui-data.sql</file>
                      </files>
                    </requireFilesExist>
                  </rules>
                  <fail>true</fail>
                </configuration>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <configuration>
              <tasks>
                  <sleep seconds="5" />
              </tasks>
            </configuration>
            <executions>
              <execution>
                <id>Ensure MariaDB startup</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M3</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.0.0-M3</version>
            <configuration>
              <includes>
                <include>fi/otavanopisto/pyramus/ui/**/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.skipserverstop>${it.skipserverstop}</it.skipserverstop>
                <it.browser>${it.browser}</it.browser>
                <it.headless>${it.headless}</it.headless>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>de.jpdigital</groupId>
            <artifactId>hibernate53-ddl-maven-plugin</artifactId>
            <version>2.5.0</version>
            <dependencies>
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
              <dependency>
                <groupId>org.mariadb.jdbc</groupId>
                <artifactId>mariadb-java-client</artifactId>
                <version>${mariadb-java-client.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <dialects>
                <param>${it.hibernate.dialect}</param>
              </dialects>
              <outputDirectory>${basedir}/target/sql/ddl</outputDirectory>
              <persistenceXml>${basedir}/src/test/resources/persistence_for_generation.xml</persistenceXml>
              <createDropStatements>false</createDropStatements>
              <omitDialectFromFileName>true</omitDialectFromFileName>
              <outputFileNamePrefix />
              <outputFileNameSuffix>createDatabase</outputFileNameSuffix>
              <packages>
                <param>fi.otavanopisto.pyramus.domainmodel</param>
              </packages>
            </configuration>
            <executions>
              <execution>
                <id>generate-ddl</id>
                <phase>process-classes</phase>
                <goals>
                  <goal>gen-ddl</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>
            <dependencies>
              <!-- specify the dependent jdbc driver here -->
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
              <dependency>
                <groupId>org.mariadb.jdbc</groupId>
                <artifactId>mariadb-java-client</artifactId>
                <version>${mariadb-java-client.version}</version>
              </dependency>
            </dependencies>

            <configuration>
              <driver>${it.jdbc.driver}</driver>
              <url>${it.jdbc.url}</url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <srcFiles>
                    <srcFile>${basedir}/target/sql/ddl/createDatabase.sql</srcFile>
                    <srcFile>src/test/resources/ui-data.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>1.9.11</version>
            <configuration>
              <!-- Container configs -->
              <container>
                <containerId>wildfly26x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>https://github.com/wildfly/wildfly/releases/download/26.1.2.Final/wildfly-26.1.2.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
                  <dependency>
                    <groupId>org.mariadb.jdbc</groupId>
                    <artifactId>mariadb-java-client</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <!-- Configuration to use with the container or the deployer -->
              <configuration>
                <files>
                  <copy>
                    <file>${project.basedir}/src/test/resources/koski-config.json</file>
                    <tofile>/configuration/koski-config.json</tofile>
                    <configfile>false</configfile>
                    <overwrite>true</overwrite>
                  </copy>
                </files>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>--add-opens java.base/java.util=ALL-UNNAMED -Xms64m -Xmx1152m</cargo.jvmargs>
                  <cargo.datasource.datasource.pyramus>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyramus>
                </properties>
              </configuration>
            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <timeout>${it.cargo.stop.timeout}</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>3.0.0.Final</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                    <commands>
                    <command>/system-property=pyramus.workspace:add(value="${basedir}/..")</command>
                    <command>/system-property=pyramus-url:add(value="${it.host}:${it.port.http}")</command>
                    <command>/subsystem=undertow/server=default-server/host=pyramus:add()</command>
                    <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=alias,value=["${it.host}"])</command>
                    <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=default-web-module,value=pyramus-ROOT.war)</command>
                    <command>/subsystem=undertow:write-attribute(name=default-virtual-host,value="pyramus")</command>
                    <command>/subsystem=undertow/server=default-server/host=default-host:remove()</command>
                    <command>/subsystem=undertow/configuration=handler/file=welcome-content:remove</command>
                    <command>:reload</command>                  
                    </commands>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-webapp</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>gen-ddl</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <it.hibernate.dialect>MYSQL5_INNODB</it.hibernate.dialect>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>de.jpdigital</groupId>
            <artifactId>hibernate53-ddl-maven-plugin</artifactId>
            <version>2.5.0</version>
            <configuration>
              <dialects>
                <param>${it.hibernate.dialect}</param>
              </dialects>
              <outputDirectory>${basedir}/target/sql/ddl</outputDirectory>
              <createDropStatements>false</createDropStatements>
              <omitDialectFromFileName>true</omitDialectFromFileName>
              <outputFileNamePrefix />
              <outputFileNameSuffix>createDatabase</outputFileNameSuffix>
              <packages>
                <param>fi.otavanopisto.pyramus.domainmodel</param>
              </packages>
            </configuration>
            <executions>
              <execution>
                <id>generate-ddl</id>
                <phase>process-classes</phase>
                <goals>
                  <goal>gen-ddl</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>
</project>

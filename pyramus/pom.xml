<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <name>Pyramus</name>
  <artifactId>pyramus</artifactId>
  <packaging>war</packaging>

  <parent>
    <groupId>fi.otavanopisto.pyramus</groupId>
    <artifactId>parent</artifactId>
    <version>0.7.112-SNAPSHOT</version>
    <relativePath>../</relativePath>
  </parent>

  <dependencies>

    <!-- Servlet -->

    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_3.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- RESTEasy -->

    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- CDI -->

    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.interceptor</groupId>
      <artifactId>jboss-interceptors-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Hibernate -->

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-infinispan</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-search-orm</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.lucene</groupId>
      <artifactId>lucene-analyzers-common</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-search-infinispan</artifactId>
      <version>5.5.1.Final</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Transactions -->

    <dependency>
      <groupId>org.jboss.spec.javax.transaction</groupId>
      <artifactId>jboss-transaction-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- JSP -->

    <dependency>
      <groupId>org.jboss.spec.javax.servlet.jsp</groupId>
      <artifactId>jboss-jsp-api_2.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- JSTL -->

    <dependency>
      <groupId>org.jboss.spec.javax.servlet.jstl</groupId>
      <artifactId>jboss-jstl-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- JMS -->

    <dependency>
      <groupId>org.jboss.spec.javax.jms</groupId>
      <artifactId>jboss-jms-api_2.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- EJB -->

    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Commons -->

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- OpenCSV -->

    <dependency>
      <groupId>net.sf.opencsv</groupId>
      <artifactId>opencsv</artifactId>
    </dependency>

    <!-- JSON -->

    <dependency>
      <groupId>net.sf.json-lib</groupId>
      <artifactId>json-lib</artifactId>
      <classifier>jdk15</classifier>
    </dependency>

    <!-- SLF4J -->

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Maven Aether -->

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-aether-provider</artifactId>
    </dependency>

    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-connector-wagon</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>sisu-inject-plexus</artifactId>
          <groupId>org.sonatype.sisu</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-http-lightweight</artifactId>
    </dependency>

    <!-- JavaFaker -->

    <dependency>
      <groupId>com.github.javafaker</groupId>
      <artifactId>javafaker</artifactId>
    </dependency>

    <!-- SnakeYAML -->

    <dependency>
      <groupId>org.yaml</groupId>
      <artifactId>snakeyaml</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Freemarker -->

    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
    </dependency>

    <!-- Xerces -->

    <dependency>
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Xalan -->

    <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>xalan</groupId>
      <artifactId>serializer</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- jsoup -->

    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <scope>provided</scope>
    </dependency>

     <!-- Oltu -->

     <dependency>
         <groupId>org.apache.oltu.oauth2</groupId>
         <artifactId>org.apache.oltu.oauth2.common</artifactId>
     </dependency>
     <dependency>
         <groupId>org.apache.oltu.oauth2</groupId>
         <artifactId>org.apache.oltu.oauth2.authzserver</artifactId>
     </dependency>
     <dependency>
         <groupId>org.apache.oltu.oauth2</groupId>
         <artifactId>org.apache.oltu.oauth2.resourceserver</artifactId>
     </dependency>

    <!-- Jackson -->

    <dependency><groupId>com.fasterxml.jackson.datatype</groupId><artifactId>jackson-datatype-jsr310</artifactId></dependency>

    <!-- Pyramus -->

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>common</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>framework</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>persistence</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>plugin-core</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>rest</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>smvcj</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>webservices-plugin</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>fi.otavanopisto.pyramus</groupId>
      <artifactId>pyramus-webhooks</artifactId>
    </dependency>

    <!-- Test Dependecies -->

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>json-schema-validator</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.oltu.oauth2</groupId>
      <artifactId>org.apache.oltu.oauth2.client</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <scope>test</scope>
    </dependency>
    
    <!-- PDF (applications) -->

    <dependency>
      <groupId>org.xhtmlrenderer</groupId>
      <artifactId>flying-saucer-pdf</artifactId>
      <version>9.1.9</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <archive>
            <manifestEntries>
              <Dependencies>org.hibernate,org.hibernate.search.orm services,org.hibernate.validator,org.apache.httpcomponents,org.apache.commons.beanutils,org.apache.commons.collections,org.apache.commons.io,org.apache.commons.lang,org.jsoup,org.apache.xerces,org.apache.xalan,org.slf4j,org.slf4j.impl,org.jboss.resteasy.resteasy-jackson2-provider, org.yaml.snakeyaml, org.apache.commons.codec</Dependencies>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>koski-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>

      <properties>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.19</version>
            <configuration>
              <includes>
                <include>fi/otavanopisto/pyramus/koski/**/*IT.java</include>
              </includes>
            </configuration>
            <executions>
              <execution>
                <id>koski-integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>koski-verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <h2.version>1.4.177</h2.version>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.pyramus.fi</it.host>
        <it.jdbc.driver>org.h2.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:h2:file:${project.build.directory}${file.separator}h2;AUTO_SERVER=TRUE</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/pyramus</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>org.hibernate.dialect.H2Dialect</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${project.build.directory}${file.separator}pyrit.keystore</it.keystore.file>
        <it.wildfly.cli-batch>true</it.wildfly.cli-batch>
        <it.skipserverstop>false</it.skipserverstop>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>${h2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>

        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.19</version>
            <configuration>
              <includes>
                <include>fi/otavanopisto/pyramus/rest/**/*IT.java</include>
                <include>fi/otavanopisto/pyramus/koski/**/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.skipserverstop>${it.skipserverstop}</it.skipserverstop>
              </systemPropertyVariables>
              <argLine>-Xmx2G</argLine>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>de.juplo</groupId>
            <artifactId>hibernate-maven-plugin</artifactId>
            <version>2.0.0</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <driver>${it.jdbc.driver}</driver>
              <dialect>${it.hibernate.dialect}</dialect>
              <url><![CDATA[${it.jdbc.url}]]></url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>create</goal>
                </goals>
              </execution>
              <execution>
                <id>drop-db-after-test</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>drop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>

            <configuration>
              <driver>${it.jdbc.driver}</driver>
              <url>${it.jdbc.url}</url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <srcFiles>
                    <srcFile>src/test/resources/rest-data.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.6.4</version>
						<configuration>
              <container>
                <containerId>wildfly10x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/wildfly.log</output>
                <zipUrlInstaller>
                  <url>http://download.jboss.org/wildfly/10.0.0.Final/wildfly-10.0.0.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xms64m -Xmx2G -XX:MaxMetaspaceSize=2G</cargo.jvmargs>
                  <cargo.datasource.datasource.pyramus>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyramus>
                </properties>
              </configuration>
              <deployer />
            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <skip>${it.skipserverstop}</skip>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>1.2.0.Final</version>
            <executions>
              <execution>
                <id>deploy</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <before-deployment>
                    <batch>true</batch>
                    <commands>
                      <command>/system-property=pyramus.workspace:add(value="${basedir}/..")</command>
                      <command>/system-property=PyramusWSAllowedIPs:add(value="127.0.0.1")</command>
                      <command>/system-property=pyramus-url:add(value="${it.host}:${it.port.https}")</command>
                      <command>/core-service=management/security-realm=ssl-realm:add()</command>
                      <command>/core-service=management/security-realm=ssl-realm/server-identity=ssl:add(keystore-path="${it.keystore.file}",keystore-password="${it.keystore.pass}",alias="${it.keystore.alias}")</command>
                      <command>/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding="https",security-realm="ssl-realm")</command>
                      <command>/subsystem=undertow/server=default-server/host=pyramus:add()</command>
                      <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=alias,value=["dev.pyramus.fi"])</command>
                      <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=default-web-module,value=ROOT.war)</command>
                      <command>/subsystem=security/security-domain=WebServices:add(cache-type=default)</command>
                      <command>/subsystem=security/security-domain=WebServices/authentication=classic:add(login-modules=[{"code"=&gt;"RealmUsersRoles","flag"=&gt;"required","module-options"=&gt;[("realm"=&gt;"WebServices"),("password-stacking"=&gt;"useFirstPass"),("rolesProperties"=&gt;"\${jboss.server.config.dir}/application-roles.properties"),("usersProperties"=&gt;"\${jboss.server.config.dir}/application-users.properties")]}])</command>
                      <command>/subsystem=logging/logger=javax.ws.rs.NotFoundException:add(level=SEVERE)</command>
                    </commands>
                  </before-deployment>
                  <filename>./pyramus-${project.version}.war</filename>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/1/system/ping</file>
                  <maxcount>20</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>ui-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <h2.version>1.4.177</h2.version>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.pyramus.fi</it.host>
        <it.jdbc.driver>org.h2.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:h2:file:${project.build.directory}${file.separator}h2;AUTO_SERVER=TRUE</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/pyramus</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>org.hibernate.dialect.H2Dialect</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${project.build.directory}${file.separator}pyrit.keystore</it.keystore.file>
        <it.skipserverstop>${it.skipserverstop}</it.skipserverstop>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>${h2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>

        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.19</version>
            <configuration>
              <includes>
                <include>fi/pyramus/ui/**/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.skipserverstop>${it.skipserverstop}</it.skipserverstop>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>de.juplo</groupId>
            <artifactId>hibernate-maven-plugin</artifactId>
            <version>2.0.0</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <driver>${it.jdbc.driver}</driver>
              <dialect>${it.hibernate.dialect}</dialect>
              <url><![CDATA[${it.jdbc.url}]]></url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>create</goal>
                </goals>
              </execution>
              <execution>
                <id>drop-db-after-test</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>drop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>

            <configuration>
              <driver>${it.jdbc.driver}</driver>
              <url>${it.jdbc.url}</url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <srcFiles>
                    <srcFile>src/test/resources/ui-data.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.4</version>
            <executions>
              <execution>
                <phase>generate-resources</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>generate-resources</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.6.4</version>
            <configuration>
              <container>
                <containerId>wildfly10x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>http://download.jboss.org/wildfly/10.0.0.Final/wildfly-10.0.0.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xms64m -Xmx2048m -XX:-UseSplitVerifier</cargo.jvmargs>
                  <cargo.datasource.datasource.pyrit>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyrit>
                </properties>
              </configuration>

              <deployables>
                <dependency />
              </deployables>

            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>1.1.0.Alpha11</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <execute-commands>
                    <batch>true</batch>
                    <timeout>180</timeout>
                    <commands>
                      <command>/system-property=PyramusWSAllowedIPs:add(value="127.0.0.1")</command>
                      <command>/system-property=pyramus-url:add(value="${it.host}:${it.port.https}")</command>
                      <command>/core-service=management/security-realm=ssl-realm:add()</command>
                      <command>/core-service=management/security-realm=ssl-realm/server-identity=ssl:add(keystore-path="${it.keystore.file}",keystore-password="${it.keystore.pass}",alias="${it.keystore.alias}")</command>
                      <command>/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding="https",security-realm="ssl-realm")</command>
                      <command>/subsystem=undertow/server=default-server/host=pyramus:add()</command>
                      <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=alias,value=["dev.pyramus.fi"])</command>
                      <command>/subsystem=undertow/server=default-server/host=pyramus:write-attribute(name=default-web-module,value=ROOT.war)</command>
                      <command>/subsystem=security/security-domain=WebServices:add(cache-type=default)</command>
                      <command>/subsystem=security/security-domain=WebServices/authentication=classic:add(login-modules=[{"code"=&gt;"RealmUsersRoles","flag"=&gt;"required","module-options"=&gt;[("realm"=&gt;"WebServices"),("password-stacking"=&gt;"useFirstPass"),("rolesProperties"=&gt;"\${jboss.server.config.dir}/application-roles.properties"),("usersProperties"=&gt;"\${jboss.server.config.dir}/application-users.properties")]}])</command>
                    </commands>
                  </execute-commands>
                </configuration>
              </execution>

              <execution>
                <id>reload-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <execute-commands>
                    <commands>
                      <command>:reload</command>
                    </commands>
                  </execute-commands>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-webapp</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>
</project>
